function int_ aver [int_ n, int_ m]
{
	create int_ result = 0;
	result = n + m;
	result = result / 2;
	give [result];
}

procedure countn [int_ n]
{
	create int_ i = 0;
	speak ["Counting to length: "];
	speak [n]; breakl;
	cycle [i < n]
	{
		i = i + 1;
		speak [i]; speak [" "];
	}
}

function bool_ iszero [int_ n]
{
	create bool_ buf;
	where [n ~ 0]
	{
		buf = true;
	}
	otherwise
	{
		buf = false;
	}
	give [buf];
} 

main
{
	create str_ string = combine ["C o u r s e   W o r k   ", "A E V - 2021"];
	speak [string]; breakl;breakl;

	create chr_ chr = "A";
	speak [chr]; breakl;	

	speak ["Numbers: "]; breakl;	
    create int_ h = 1b10;
	speak [h]; breakl;	
	create int_ q = 0o10;
	speak [q]; breakl;	
	speak ["Difference = "];
	create int_ dif = h - q;
	speak [dif]; breakl;	


	create int_  lc = lexcomp ["Good", "Goooob"];
	speak ["Lex. comparison: "];
	speak [lc]; breakl;	


	create int_ length = measure ["Now"];
	speak ["Is length of str > 2?"]; breakl;
	where [length > 2]
	{
		speak ["True! "];
		countn [length]; breakl;
	}
	otherwise 
	{
		speak ["False! It is less"]; breakl;
	}

	create int_ exp = exponent [3, 3];
	speak ["exp[3,3] = "]; 
	speak [exp]; breakl;

	create int_ result = aver [4, exp];
	speak ["Average of 4 and exponent [3,3] = "];
	speak [result]; breakl;

	speak ["Is average of 4 and exponent [3,3] = 0?"]; breakl;

	create bool_ fl = iszero [result];
	where [fl]
	{
		speak ["True! It is zero"]; breakl;
	}
	otherwise
	{
		speak ["False! It is not zero: "]; 
		speak [result]; breakl;
		speak ["Remainer is: "];
		create int_ rem = (exp + 4) % 2;
		speak [rem]; breakl;
	}

	create int_ r = randomize [2, 57];
	speak ["Random number: "];
	speak [r]; breakl; breakl;
	speak ["End of example."]; breakl;
}
